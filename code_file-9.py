# -*- coding: utf-8 -*-
"""CODE FILE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sVym-fa565x7l_T2YVJuF4uvb78saX7k
"""

import pandas as pd
import streamlit as st
from twilio.rest import Client

# Streamlit file uploader
uploaded_file = st.file_uploader("Upload your CSV file", type="csv")
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

# Twilio credentials (Replace with actual credentials)
TWILIO_SID = "ACa6e6f83f95558369b315c7738d6ee2a4"
TWILIO_AUTH_TOKEN = "b50e775a1d7cc8c38b07b69d7c03d61b"
TWILIO_PHONE_NUMBER = "+13156664155"  # Replace with a valid Twilio number
RECIPIENT_PHONE_NUMBER = "+8588824743"  # Replace with a valid, verified number

# Function to send an SMS alert
def send_alert(equipment, hospital, remaining, total):
    try:
        client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)
        message = client.messages.create(
        body=f"ALERT: {equipment} at {hospital} is running low! Only {remaining}/{total} left.",
        from_=TWILIO_PHONE_NUMBER,
        to=RECIPIENT_PHONE_NUMBER
        )
        st.success(f"Alert sent for {equipment} at {hospital}")
    except Exception as e:
        st.error(f"Failed to send alert: {e}")

# Define threshold percentage (e.g., 10% of total count)
THRESHOLD_PERCENTAGE = 0.1

def check_equipment_levels():
    alerts = []
    for _, row in df.iterrows():
        total = row["Total Count"]
        remaining = row["Remaining Count"]
        threshold = total * THRESHOLD_PERCENTAGE

    if remaining <= threshold:
        alerts.append((row["Equipment Name"], row["Hospital Name"], remaining, total))
        send_alert(row["Equipment Name"], row["Hospital Name"], remaining, total)

    if not alerts:
        st.info("All equipment levels are sufficient.")
    else:
        st.warning("Alerts sent for the following equipment:")
    for alert in alerts:
        st.write(f"{alert[0]} at {alert[1]}: {alert[2]}/{alert[3]} remaining")

# Streamlit UI
st.title("Hospital Equipment Monitoring System")
st.write("This system monitors hospital equipment levels and sends alerts when stock is low.")

if st.button("Check Equipment Levels"):
  check_equipment_levels()
else:
  st.warning("Please upload a CSV file to proceed.")